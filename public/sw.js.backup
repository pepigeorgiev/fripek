const CACHE_NAME = 'fripek-v3';
const OFFLINE_DATA = 'offline-transactions';

const urlsToCache = [
    '/manifest.json',
    '/images/icon-192x192.png',
    '/images/icon-512x512.png',
    '/css/app.css',
    '/js/app.js'
];

// Install event
self.addEventListener('install', event => {
    console.log('Service Worker: Installing...');
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then(cache => {
                console.log('Service Worker: Caching Files...');
                return cache.addAll(urlsToCache);
            })
            .then(() => self.skipWaiting())
    );
});

// Activate event
self.addEventListener('activate', event => {
    console.log('Service Worker: Activated');
    event.waitUntil(
        caches.keys()
            .then(cacheNames => {
                return Promise.all(
                    cacheNames.map(cache => {
                        if (cache !== CACHE_NAME) {
                            console.log('Service Worker: Clearing Old Cache');
                            return caches.delete(cache);
                        }
                    })
                );
            })
    );
    return self.clients.claim();
});

// Updated Fetch event handler
self.addEventListener('fetch', event => {
    // Don't intercept authentication or dynamic routes
    if (event.request.url.includes('/login') || 
        event.request.url.includes('/daily-transactions')) {
        return;
    }

    // Handle POST requests
    if (event.request.method === 'POST') {
        return;
    }

    // Handle GET requests for static assets only
    if (event.request.method === 'GET') {
        event.respondWith(
            caches.match(event.request)
                .then(response => {
                    if (response) {
                        return response;
                    }
                    return fetch(event.request);
                })
                .catch(() => {
                    // Don't try to handle navigation requests
                    if (event.request.mode === 'navigate') {
                        return fetch(event.request);
                    }
                })
        );
    }
});

// Background sync
self.addEventListener('sync', event => {
    if (event.tag === 'sync-transactions') {
        event.waitUntil(syncOfflineTransactions());
    }
});

// IndexedDB helper
function openDB() {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open('FripekOfflineDB', 1);

        request.onerror = () => reject(request.error);
        request.onsuccess = () => resolve(request.result);

        request.onupgradeneeded = (event) => {
            const db = event.target.result;
            if (!db.objectStoreNames.contains(OFFLINE_DATA)) {
                db.createObjectStore(OFFLINE_DATA, { keyPath: 'timestamp' });
            }
        };
    });
}

// Sync function
async function syncOfflineTransactions() {
    console.log('Syncing offline transactions...');
    const db = await openDB();
    const tx = db.transaction(OFFLINE_DATA, 'readwrite');
    const store = tx.objectStore(OFFLINE_DATA);
    const transactions = await store.getAll();

    for (const transaction of transactions) {
        try {
            const formData = new FormData();
            Object.entries(transaction.data).forEach(([key, value]) => {
                formData.append(key, value);
            });

            const response = await fetch(transaction.url, {
                method: transaction.method,
                body: formData,
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                }
            });

            if (response.ok) {
                await store.delete(transaction.timestamp);
                console.log('Successfully synced transaction:', transaction.timestamp);
            }
        } catch (error) {
            console.error('Failed to sync transaction:', error);
        }
    }
} 